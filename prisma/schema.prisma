generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  ADMIN
  DENTIST
  RECEPTION
}

enum PatientStatus {
  ACTIVE
  INACTIVE
  WAITING
  DISCHARGED
}

enum Gender {
  FEMALE
  MALE
  NON_BINARY
  UNDISCLOSED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  MISSED
}

enum PaymentStatus {
  UNPAID
  PAID
  PARTIAL
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum QuestionType {
  TEXT
  BOOLEAN
  MULTIPLE_CHOICE
  NUMBER
}

enum AlertLevel {
  NONE
  INFO
  WARNING
  CRITICAL
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  PENDING
  PAID
  OVERDUE
}

model User {
  id            String           @id @default(cuid())
  name          String
  email         String           @unique
  hashedPassword String
  role          UserRole         @default(DENTIST)
  avatarUrl     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  appointments  Appointment[]    @relation("AppointmentProvider")
  tasks         Task[]           @relation("TaskAssignee")
  attachments   Attachment[]
  anamnesisSets AnamnesisResponseSet[] @relation("ResponseFilledBy")
  clinicalNotes ClinicalNote[]   @relation("ClinicalNoteAuthor")
  notifications Notification[]   @relation("NotificationRecipient")
}

model Patient {
  id             String                 @id @default(cuid())
  firstName      String
  lastName       String
  fullName       String                 @default("")
  status         PatientStatus          @default(ACTIVE)
  gender         Gender                 @default(UNDISCLOSED)
  birthDate      DateTime?
  email          String?                @unique
  phone          String?
  documentNumber String?
  address        Json?
  notes          String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  appointments   Appointment[]
  anamnesisSets  AnamnesisResponseSet[]
  finances       FinancialTransaction[]
  attachments    Attachment[]

  @@index([status])
  @@index([fullName])
}

model Appointment {
  id             String            @id @default(cuid())
  patient        Patient           @relation(fields: [patientId], references: [id])
  patientId      String
  provider       User              @relation("AppointmentProvider", fields: [providerId], references: [id])
  providerId     String
  title          String
  description    String?
  status         AppointmentStatus @default(SCHEDULED)
  paymentStatus  PaymentStatus     @default(UNPAID)
  fee            Decimal?          @db.Decimal(10, 2)
  paidAmount     Decimal?          @db.Decimal(10, 2)
  startAt        DateTime
  endAt          DateTime
  location       String?
  color          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  tasks          Task[]
  notes          ClinicalNote[]
  anamnesisSets  AnamnesisResponseSet[]
  attachments    Attachment[]
  financialTransactions FinancialTransaction[]

  @@index([patientId])
  @@index([providerId, startAt])
  @@index([startAt])
}

model ClinicalNote {
  id           String       @id @default(cuid())
  appointment  Appointment  @relation(fields: [appointmentId], references: [id])
  appointmentId String
  author       User         @relation("ClinicalNoteAuthor", fields: [authorId], references: [id])
  authorId     String
  title        String?
  content      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model AnamnesisTemplate {
  id          String              @id @default(cuid())
  name        String
  description String?
  category    String?
  isDefault   Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  questions   AnamnesisQuestion[]
  responses   AnamnesisResponseSet[]
}

model AnamnesisQuestion {
  id             String            @id @default(cuid())
  template       AnamnesisTemplate @relation(fields: [templateId], references: [id])
  templateId     String
  question       String
  type           QuestionType
  helperText     String?
  alertLabel     String?
  alertLevel     AlertLevel        @default(NONE)
  order          Int               @default(0)
  isRequired     Boolean           @default(false)
  options        Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  answers        AnamnesisAnswer[]

  @@index([templateId, order])
}

model AnamnesisResponseSet {
  id             String             @id @default(cuid())
  template       AnamnesisTemplate  @relation(fields: [templateId], references: [id])
  templateId     String
  patient        Patient            @relation(fields: [patientId], references: [id])
  patientId      String
  appointment    Appointment?       @relation(fields: [appointmentId], references: [id])
  appointmentId  String?
  filledBy       User?              @relation("ResponseFilledBy", fields: [filledById], references: [id])
  filledById     String?
  filledAt       DateTime           @default(now())
  paymentStatus  PaymentStatus      @default(UNPAID)
  amountDue      Decimal?           @db.Decimal(10, 2)
  amountPaid     Decimal?           @db.Decimal(10, 2)
  notes          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  answers        AnamnesisAnswer[]
  attachments    Attachment[]

  @@index([patientId, templateId])
  @@index([appointmentId])
}

model AnamnesisAnswer {
  id             String                @id @default(cuid())
  question       AnamnesisQuestion     @relation(fields: [questionId], references: [id])
  questionId     String
  responseSet    AnamnesisResponseSet  @relation(fields: [responseSetId], references: [id])
  responseSetId  String
  valueText      String?
  valueBoolean   Boolean?
  valueNumber    Decimal?              @db.Decimal(10, 2)
  valueOptions   Json?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@index([responseSetId])
}

model Attachment {
  id             String                @id @default(cuid())
  patient        Patient               @relation(fields: [patientId], references: [id])
  patientId      String
  appointment    Appointment?          @relation(fields: [appointmentId], references: [id])
  appointmentId  String?
  responseSet    AnamnesisResponseSet? @relation(fields: [responseSetId], references: [id])
  responseSetId  String?
  uploadedBy     User?                 @relation(fields: [uploadedById], references: [id])
  uploadedById   String?
  name           String
  url            String
  mimeType       String
  sizeBytes      Int?
  createdAt      DateTime              @default(now())

  @@index([patientId])
  @@index([appointmentId])
}

model FinancialTransaction {
  id             String             @id @default(cuid())
  patient        Patient?           @relation(fields: [patientId], references: [id])
  patientId      String?
  appointment    Appointment?       @relation(fields: [appointmentId], references: [id])
  appointmentId  String?
  type           TransactionType
  status         TransactionStatus  @default(PENDING)
  category       String
  description    String?
  amount         Decimal            @db.Decimal(10, 2)
  dueDate        DateTime?
  paidAt         DateTime?
  notes          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([patientId])
  @@index([appointmentId])
  @@index([type, status])
}

model Notification {
  id          String      @id @default(cuid())
  title       String
  message     String
  read        Boolean     @default(false)
  recipient   User        @relation("NotificationRecipient", fields: [recipientId], references: [id])
  recipientId String
  link        String?
  createdAt   DateTime    @default(now())
}

/// Controle de estoque de implantes (itens simples para demonstração)
model ImplantItem {
  id          String   @id @default(cuid())
  type        String   // CMI | HE | HI | TAPA
  lengthMm    Int?
  diameterMm  Decimal? @db.Decimal(4,2)
  quantity    Int      @default(0)
  brand       String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
}

/// Materiais de cirurgia (nome + quantidade + observacoes)
model SurgeryItem {
  id          String   @id @default(cuid())
  name        String
  quantity    Int      @default(0)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
}

/// Materiais de dentistica (restauradores)
model RestorativeItem {
  id          String   @id @default(cuid())
  name        String
  quantity    Int      @default(0)
  color       String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
}

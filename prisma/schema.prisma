generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                String                 @id @default(cuid())
  name              String
  email             String                 @unique
  hashedPassword    String
  role              UserRole               @default(DENTIST)
  avatarUrl         String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  anamnesisSets     AnamnesisResponseSet[] @relation("ResponseFilledBy")
  appointments      Appointment[]          @relation("AppointmentProvider")
  attachments       Attachment[]
  clinicalNotes     ClinicalNote[]         @relation("ClinicalNoteAuthor")
  notifications     Notification[]         @relation("NotificationRecipient")
  odontogramEntries OdontogramEntry[]
  tasks             Task[]                 @relation("TaskAssignee")
}

model Patient {
  id                String                 @id @default(cuid())
  firstName         String
  lastName          String
  fullName          String                 @default("")
  status            PatientStatus          @default(ACTIVE)
  gender            Gender                 @default(UNDISCLOSED)
  birthDate         DateTime?
  email             String?                @unique
  phone             String?
  documentNumber    String?
  address           Json?
  notes             String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  anamnesisSets     AnamnesisResponseSet[]
  appointments      Appointment[]
  attachments       Attachment[]
  finances          FinancialTransaction[]
  odontogramRecords OdontogramRecord[]

  @@index([status])
  @@index([fullName])
}

model Appointment {
  id                    String                 @id @default(cuid())
  patientId             String
  providerId            String
  title                 String
  description           String?
  status                AppointmentStatus      @default(SCHEDULED)
  paymentStatus         PaymentStatus          @default(UNPAID)
  fee                   Decimal?               @db.Decimal(10, 2)
  paidAmount            Decimal?               @db.Decimal(10, 2)
  startAt               DateTime
  endAt                 DateTime
  location              String?
  color                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  anamnesisSets         AnamnesisResponseSet[]
  patient               Patient                @relation(fields: [patientId], references: [id])
  provider              User                   @relation("AppointmentProvider", fields: [providerId], references: [id])
  attachments           Attachment[]
  notes                 ClinicalNote[]
  financialTransactions FinancialTransaction[]
  tasks                 Task[]

  @@index([patientId])
  @@index([providerId, startAt])
  @@index([startAt])
}

model ClinicalNote {
  id            String      @id @default(cuid())
  appointmentId String
  authorId      String
  title         String?
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  author        User        @relation("ClinicalNoteAuthor", fields: [authorId], references: [id])
}

model Task {
  id            String       @id @default(cuid())
  title         String
  description   String?
  status        TaskStatus   @default(TODO)
  dueDate       DateTime?
  appointmentId String?
  assigneeId    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  assignee      User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
}

model AnamnesisTemplate {
  id          String                 @id @default(cuid())
  name        String
  description String?
  category    String?
  isDefault   Boolean                @default(false)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  questions   AnamnesisQuestion[]
  responses   AnamnesisResponseSet[]
}

model AnamnesisQuestion {
  id         String            @id @default(cuid())
  templateId String
  question   String
  type       QuestionType
  helperText String?
  alertLabel String?
  alertLevel AlertLevel        @default(NONE)
  order      Int               @default(0)
  isRequired Boolean           @default(false)
  options    Json?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  answers    AnamnesisAnswer[]
  template   AnamnesisTemplate @relation(fields: [templateId], references: [id])

  @@index([templateId, order])
}

model AnamnesisResponseSet {
  id            String            @id @default(cuid())
  templateId    String
  patientId     String
  appointmentId String?
  filledById    String?
  filledAt      DateTime          @default(now())
  status        AnamnesisStatus   @default(OPEN)
  paymentStatus PaymentStatus     @default(UNPAID)
  amountDue     Decimal?          @db.Decimal(10, 2)
  amountPaid    Decimal?          @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  answers       AnamnesisAnswer[]
  appointment   Appointment?      @relation(fields: [appointmentId], references: [id])
  filledBy      User?             @relation("ResponseFilledBy", fields: [filledById], references: [id])
  patient       Patient           @relation(fields: [patientId], references: [id])
  template      AnamnesisTemplate @relation(fields: [templateId], references: [id])
  attachments   Attachment[]
  odontogram    OdontogramRecord? @relation("ResponseSetOdontogram")

  @@index([patientId, templateId])
  @@index([appointmentId])
}

model AnamnesisAnswer {
  id            String               @id @default(cuid())
  questionId    String
  responseSetId String
  valueText     String?
  valueBoolean  Boolean?
  valueNumber   Decimal?             @db.Decimal(10, 2)
  valueOptions  Json?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  question      AnamnesisQuestion    @relation(fields: [questionId], references: [id])
  responseSet   AnamnesisResponseSet @relation(fields: [responseSetId], references: [id])

  @@index([responseSetId])
}

model Attachment {
  id            String                @id @default(cuid())
  patientId     String
  appointmentId String?
  responseSetId String?
  uploadedById  String?
  name          String
  url           String
  mimeType      String
  sizeBytes     Int?
  createdAt     DateTime              @default(now())
  appointment   Appointment?          @relation(fields: [appointmentId], references: [id])
  patient       Patient               @relation(fields: [patientId], references: [id])
  responseSet   AnamnesisResponseSet? @relation(fields: [responseSetId], references: [id])
  uploadedBy    User?                 @relation(fields: [uploadedById], references: [id])

  @@index([patientId])
  @@index([appointmentId])
}

model OdontogramRecord {
  id            String                @id @default(cuid())
  patientId     String
  responseSetId String?               @unique
  chartType     OdontogramChartType   @default(PERMANENT)
  notes         String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  entries       OdontogramEntry[]
  patient       Patient               @relation(fields: [patientId], references: [id])
  responseSet   AnamnesisResponseSet? @relation("ResponseSetOdontogram", fields: [responseSetId], references: [id])

  @@index([patientId])
}

model OdontogramEntry {
  id           String           @id @default(cuid())
  odontogramId String
  toothNumber  String
  region       String?
  annotations  String?
  status       ToothStatus      @default(OPEN)
  authorId     String?
  createdAt    DateTime         @default(now())
  author       User?            @relation(fields: [authorId], references: [id])
  odontogram   OdontogramRecord @relation(fields: [odontogramId], references: [id])

  @@index([odontogramId])
  @@index([toothNumber])
}

model FinancialTransaction {
  id            String            @id @default(cuid())
  patientId     String?
  appointmentId String?
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  category      String
  description   String?
  amount        Decimal           @db.Decimal(10, 2)
  dueDate       DateTime?
  paidAt        DateTime?
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  appointment   Appointment?      @relation(fields: [appointmentId], references: [id])
  patient       Patient?          @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([appointmentId])
  @@index([type, status])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  read        Boolean  @default(false)
  recipientId String
  link        String?
  createdAt   DateTime @default(now())
  recipient   User     @relation("NotificationRecipient", fields: [recipientId], references: [id])
}

/// Controle de estoque de implantes (itens simples para demonstração)
model ImplantItem {
  id         String   @id @default(cuid())
  type       String
  lengthMm   Int?
  diameterMm Decimal? @db.Decimal(4, 2)
  quantity   Int      @default(0)
  brand      String?
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([type])
}

/// Materiais de cirurgia (nome + quantidade + observacoes)
model SurgeryItem {
  id        String   @id @default(cuid())
  name      String
  quantity  Int      @default(0)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

/// Materiais de dentistica (restauradores)
model RestorativeItem {
  id        String   @id @default(cuid())
  name      String
  quantity  Int      @default(0)
  color     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

enum UserRole {
  ADMIN
  DENTIST
  RECEPTION
}

enum PatientStatus {
  ACTIVE
  INACTIVE
  WAITING
  DISCHARGED
}

enum Gender {
  FEMALE
  MALE
  NON_BINARY
  UNDISCLOSED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  MISSED
}

enum PaymentStatus {
  UNPAID
  PAID
  PARTIAL
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum QuestionType {
  TEXT
  BOOLEAN
  MULTIPLE_CHOICE
  NUMBER
}

enum AlertLevel {
  NONE
  INFO
  WARNING
  CRITICAL
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  PENDING
  PAID
  OVERDUE
}

enum AnamnesisStatus {
  OPEN
  FINALIZED
}

enum OdontogramChartType {
  PERMANENT
  DECIDUOUS
}

enum ToothStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  NOTE
}
